Сокеты. Клиент-серверное программирование.

Сокет - это технология, которая прячет детали информационного обмена между участниками.
Один из них "пишет в сокет", другой "читает из сокета".
Детали передачи данных от точки "записи" до точки "чтения" прячутся под формализмом "сокет".

Сеть (компьютерная) - совокупность узлов и связей (каналов связи).
Узел в сети - ПК, принтер, роутер, другой прибор, способный выполнять определенные задачи(преобразовывать данные).
Канал - способ обеспечение обмена данными (электрические провода, оптические кабели, безпроводные каналы и т.п.)

Самостоятельно разобрать: топология сети, сетевая технология, транспортный протокол.

В узле (сети) может одновременно выполняться несколько программ, каждая из которых требует сетевого трафика.
Для их отличия используется термин "порт" (сетевой порт) - это целое число, которое можно считать номером программы.
Сам сетевой узел идентифицируется сетевым адресом, например (в TCP/IP) - IP-адресом.
Это число, которое записывается в разделённой форме:
  IPv4 - 32 бита, записанные по байтам (192.168.10.221)
  IPv6 - 128 бит, со своими правилами записи (::1)

Аналогия: почтовое отделение имеет адрес (Садовая, 2), но за этим адрессом есть много почтовых ящиков и для
доставки письма нужно указать номер ящика.

Полный адрес программы (точка подключения сокета) - это комбинация IP:port, которая наз. EndPoint.

Клиент-серверная технология
Архитектура проекта (комплекса) у которой роли сетевых узлов разделены как "клиент" и "сервер".
Роли обозначают порядок взаимодействия:
  - сервер стартует первым и находится в постоянном "слушании"
  - клиент стартует в любой момент, "вызывает" сервер (подключается)
  далее порядок работы обозначается прикладным протоколом, например,
    сначала "пишет" клиент, сервер "читает"
    потом наоборот
Технология позволяет:
  - выполнять серверсную работу (обрабатывать данные)
  - обеспечивать коммуникацию клиентов, причём сохранять "обращение" если один из клиентов не на связи

Server                   Client
 (1)Listen
                   ------ Connect(2)
 (3)Accept ___/socket/

            <--------- Send(4)
 (5)Receive
 (6)Send() ---------->
                       (7)Receive
                      